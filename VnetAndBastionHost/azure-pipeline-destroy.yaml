# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'tfstateRG01'
  bkstrg: 'tfstate011046570710'
  bkcontainer: 'tfstate'
  ## name of the config that will be add to storage account
  bkstrgkey: 'devpipeline.terraform.tfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/VnetAndBastionHost'
              backendServiceArm: 'DevTestServiceConnection'
              backendAzureRmResourceGroupName: '${bkstrgrg}'
              backendAzureRmStorageAccountName: '${bkstrg}'
              backendAzureRmContainerName: '${bkcontainer}'
              backendAzureRmKey: '${bkstrgkey}'
              
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/VnetAndBastionHost'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/VnetAndBastionHost'
              backendServiceArm: 'DevTestServiceConnection'
              backendAzureRmResourceGroupName: '${bkstrgrg}'
              backendAzureRmStorageAccountName: '${bkstrg}'
              backendAzureRmContainerName: '${bkcontainer}'
              backendAzureRmKey: '${bkstrgkey}'

          - task: TerraformTaskV4@4
            displayName: destroy
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              workingDirectory: '$(System.DefaultWorkingDirectory)/VnetAndBastionHost'
              environmentServiceNameAzureRM: 'DevTestServiceConnection'